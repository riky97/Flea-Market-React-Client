{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"mode\", \"prefixCls\", \"backfill\", \"fieldNames\", \"inputValue\", \"searchValue\", \"onSearch\", \"autoClearSearchValue\", \"onSelect\", \"onDeselect\", \"filterOption\", \"filterSort\", \"optionFilterProp\", \"optionLabelProp\", \"options\", \"children\", \"defaultActiveFirstOption\", \"menuItemSelectedIcon\", \"virtual\", \"listHeight\", \"listItemHeight\", \"value\", \"defaultValue\", \"labelInValue\", \"onChange\"];\n/**\n * To match accessibility requirement, we always provide an input in the component.\n * Other element will not set `tabIndex` to avoid `onBlur` sequence problem.\n * For focused select, we set `aria-live=\"polite\"` to update the accessibility content.\n *\n * ref:\n * - keyboard: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role#Keyboard_interactions\n *\n * New api:\n * - listHeight\n * - listItemHeight\n * - component\n *\n * Remove deprecated api:\n * - multiple\n * - tags\n * - combobox\n * - firstActiveValue\n * - dropdownMenuStyle\n * - openClassName (Not list in api)\n *\n * Update:\n * - `backfill` only support `combobox` mode\n * - `combobox` mode not support `labelInValue` since it's meaningless\n * - `getInputElement` only support `combobox` mode\n * - `onChange` return OptionData instead of ReactNode\n * - `filterOption` `onChange` `onSelect` accept OptionData instead of ReactNode\n * - `combobox` mode trigger `onChange` will get `undefined` if no `value` match in Option\n * - `combobox` mode not support `optionLabelProp`\n */\n\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport BaseSelect, { isMultiple } from './BaseSelect';\nimport OptionList from './OptionList';\nimport Option from './Option';\nimport OptGroup from './OptGroup';\nimport useOptions from './hooks/useOptions';\nimport SelectContext from './SelectContext';\nimport useId from './hooks/useId';\nimport useRefFunc from './hooks/useRefFunc';\nimport { fillFieldNames, flattenOptions, injectPropsWithOption } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { toArray } from './utils/commonUtil';\nimport useFilterOptions from './hooks/useFilterOptions';\nimport useCache from './hooks/useCache';\nvar OMIT_DOM_PROPS = ['inputValue'];\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar Select = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      mode = props.mode,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-select' : _props$prefixCls,\n      backfill = props.backfill,\n      fieldNames = props.fieldNames,\n      inputValue = props.inputValue,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      filterOption = props.filterOption,\n      filterSort = props.filterSort,\n      optionFilterProp = props.optionFilterProp,\n      optionLabelProp = props.optionLabelProp,\n      options = props.options,\n      children = props.children,\n      defaultActiveFirstOption = props.defaultActiveFirstOption,\n      menuItemSelectedIcon = props.menuItemSelectedIcon,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      labelInValue = props.labelInValue,\n      onChange = props.onChange,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var multiple = isMultiple(mode);\n  var childrenAsData = !!(!options && children);\n  var mergedFilterOption = React.useMemo(function () {\n    if (filterOption === undefined && mode === 'combobox') {\n      return false;\n    }\n\n    return filterOption;\n  }, [filterOption, mode]); // ========================= FieldNames =========================\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames, childrenAsData);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [// We stringify fieldNames to avoid unnecessary re-renders.\n  JSON.stringify(fieldNames), childrenAsData]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1]; // =========================== Option ===========================\n\n\n  var parsedOptions = useOptions(options, children, mergedFieldNames);\n  var valueOptions = parsedOptions.valueOptions,\n      labelOptions = parsedOptions.labelOptions,\n      mergedOptions = parsedOptions.options; // ========================= Wrap Value =========================\n\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    // Convert to array\n    var valueList = toArray(draftValues); // Convert to labelInValue type\n\n    return valueList.map(function (val) {\n      var rawValue;\n      var rawLabel;\n      var rawKey;\n      var rawDisabled; // Fill label & value\n\n      if (isRawValue(val)) {\n        rawValue = val;\n      } else {\n        var _val$value;\n\n        rawKey = val.key;\n        rawLabel = val.label;\n        rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;\n      }\n\n      var option = valueOptions.get(rawValue);\n\n      if (option) {\n        var _option$key; // Fill missing props\n\n\n        if (rawLabel === undefined) rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];\n        if (rawKey === undefined) rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;\n        rawDisabled = option === null || option === void 0 ? void 0 : option.disabled; // Warning if label not same as provided\n\n        if (process.env.NODE_ENV !== 'production' && !isRawValue(val)) {\n          var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];\n\n          if (optionLabel !== undefined && optionLabel !== rawLabel) {\n            warning(false, '`label` of `value` is not same as `label` in Select options.');\n          }\n        }\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        key: rawKey,\n        disabled: rawDisabled\n      };\n    });\n  }, [mergedFieldNames, optionLabelProp, valueOptions]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1]; // Merged value with LabelValueType\n\n\n  var rawLabeledValues = React.useMemo(function () {\n    var _values$;\n\n    var values = convert2LabelValues(internalValue); // combobox no need save value when it's empty\n\n    if (mode === 'combobox' && !((_values$ = values[0]) === null || _values$ === void 0 ? void 0 : _values$.value)) {\n      return [];\n    }\n\n    return values;\n  }, [internalValue, convert2LabelValues, mode]); // Fill label with cache to avoid option remove\n\n  var _useCache = useCache(rawLabeledValues, valueOptions),\n      _useCache2 = _slicedToArray(_useCache, 2),\n      mergedValues = _useCache2[0],\n      getMixedOption = _useCache2[1];\n\n  var displayValues = React.useMemo(function () {\n    // `null` need show as placeholder instead\n    // https://github.com/ant-design/ant-design/issues/25057\n    if (!mode && mergedValues.length === 1) {\n      var firstValue = mergedValues[0];\n\n      if (firstValue.value === null && (firstValue.label === null || firstValue.label === undefined)) {\n        return [];\n      }\n    }\n\n    return mergedValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mode, mergedValues]);\n  /** Convert `displayValues` to raw value type set */\n\n  var rawValues = React.useMemo(function () {\n    return new Set(mergedValues.map(function (val) {\n      return val.value;\n    }));\n  }, [mergedValues]);\n  React.useEffect(function () {\n    if (mode === 'combobox') {\n      var _mergedValues$;\n\n      var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;\n\n      if (strValue !== undefined && strValue !== null) {\n        setSearchValue(String(strValue));\n      }\n    }\n  }, [mergedValues]); // ======================= Display Option =======================\n  // Create a placeholder item if not exist in `options`\n\n  var createTagOption = useRefFunc(function (val, label) {\n    var _ref;\n\n    var mergedLabel = label !== null && label !== void 0 ? label : val;\n    return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;\n  }); // Fill tag as option if mode is `tags`\n\n  var filledTagOptions = React.useMemo(function () {\n    if (mode !== 'tags') {\n      return mergedOptions;\n    } // >>> Tag mode\n\n\n    var cloneOptions = _toConsumableArray(mergedOptions); // Check if value exist in options (include new patch item)\n\n\n    var existOptions = function existOptions(val) {\n      return valueOptions.has(val);\n    }; // Fill current value as option\n\n\n    _toConsumableArray(mergedValues).sort(function (a, b) {\n      return a.value < b.value ? -1 : 1;\n    }).forEach(function (item) {\n      var val = item.value;\n\n      if (!existOptions(val)) {\n        cloneOptions.push(createTagOption(val, item.label));\n      }\n    });\n\n    return cloneOptions;\n  }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);\n  var filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp); // Fill options with search value if needed\n\n  var filledSearchOptions = React.useMemo(function () {\n    if (mode !== 'tags' || !mergedSearchValue || filteredOptions.some(function (item) {\n      return item[optionFilterProp || 'value'] === mergedSearchValue;\n    })) {\n      return filteredOptions;\n    } // Fill search value as option\n\n\n    return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));\n  }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);\n  var orderedFilteredOptions = React.useMemo(function () {\n    if (!filterSort) {\n      return filledSearchOptions;\n    }\n\n    return _toConsumableArray(filledSearchOptions).sort(function (a, b) {\n      return filterSort(a, b);\n    });\n  }, [filledSearchOptions, filterSort]);\n  var displayOptions = React.useMemo(function () {\n    return flattenOptions(orderedFilteredOptions, {\n      fieldNames: mergedFieldNames,\n      childrenAsData: childrenAsData\n    });\n  }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]); // =========================== Change ===========================\n\n  var triggerChange = function triggerChange(values) {\n    var labeledValues = convert2LabelValues(values);\n    setInternalValue(labeledValues);\n\n    if (onChange && ( // Trigger event only when value changed\n    labeledValues.length !== mergedValues.length || labeledValues.some(function (newVal, index) {\n      var _mergedValues$index;\n\n      return ((_mergedValues$index = mergedValues[index]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);\n    }))) {\n      var returnValues = labelInValue ? labeledValues : labeledValues.map(function (v) {\n        return v.value;\n      });\n      var returnOptions = labeledValues.map(function (v) {\n        return injectPropsWithOption(getMixedOption(v.value));\n      });\n      onChange( // Value\n      multiple ? returnValues : returnValues[0], // Option\n      multiple ? returnOptions : returnOptions[0]);\n    }\n  }; // ======================= Accessibility ========================\n\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeValue = _React$useState2[0],\n      setActiveValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      accessibilityIndex = _React$useState4[0],\n      setAccessibilityIndex = _React$useState4[1];\n\n  var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== undefined ? defaultActiveFirstOption : mode !== 'combobox';\n  var onActiveValue = React.useCallback(function (active, index) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$source = _ref2.source,\n        source = _ref2$source === void 0 ? 'keyboard' : _ref2$source;\n\n    setAccessibilityIndex(index);\n\n    if (backfill && mode === 'combobox' && active !== null && source === 'keyboard') {\n      setActiveValue(String(active));\n    }\n  }, [backfill, mode]); // ========================= OptionList =========================\n\n  var triggerSelect = function triggerSelect(val, selected) {\n    var getSelectEnt = function getSelectEnt() {\n      var _option$key2;\n\n      var option = getMixedOption(val);\n      return [labelInValue ? {\n        label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],\n        value: val,\n        key: (_option$key2 = option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val\n      } : val, injectPropsWithOption(option)];\n    };\n\n    if (selected && onSelect) {\n      var _getSelectEnt = getSelectEnt(),\n          _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2),\n          wrappedValue = _getSelectEnt2[0],\n          option = _getSelectEnt2[1];\n\n      onSelect(wrappedValue, option);\n    } else if (!selected && onDeselect) {\n      var _getSelectEnt3 = getSelectEnt(),\n          _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2),\n          _wrappedValue = _getSelectEnt4[0],\n          _option = _getSelectEnt4[1];\n\n      onDeselect(_wrappedValue, _option);\n    }\n  }; // Used for OptionList selection\n\n\n  var onInternalSelect = useRefFunc(function (val, info) {\n    var cloneValues; // Single mode always trigger select only with option list\n\n    var mergedSelect = multiple ? info.selected : true;\n\n    if (mergedSelect) {\n      cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];\n    } else {\n      cloneValues = mergedValues.filter(function (v) {\n        return v.value !== val;\n      });\n    }\n\n    triggerChange(cloneValues);\n    triggerSelect(val, mergedSelect); // Clean search value if single or configured\n\n    if (mode === 'combobox') {\n      // setSearchValue(String(val));\n      setActiveValue('');\n    } else if (!isMultiple || autoClearSearchValue) {\n      setSearchValue('');\n      setActiveValue('');\n    }\n  }); // ======================= Display Change =======================\n  // BaseSelect display values change\n\n  var onDisplayValuesChange = function onDisplayValuesChange(nextValues, info) {\n    triggerChange(nextValues);\n\n    if (info.type === 'remove' || info.type === 'clear') {\n      info.values.forEach(function (item) {\n        triggerSelect(item.value, false);\n      });\n    }\n  }; // =========================== Search ===========================\n\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n    setActiveValue(null); // [Submit] Tag mode should flush input\n\n    if (info.source === 'submit') {\n      var formatted = (searchText || '').trim(); // prevent empty tags from appearing when you click the Enter button\n\n      if (formatted) {\n        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));\n        triggerChange(newRawValues);\n        triggerSelect(formatted, true);\n        setSearchValue('');\n      }\n\n      return;\n    }\n\n    if (info.source !== 'blur') {\n      if (mode === 'combobox') {\n        triggerChange(searchText);\n      }\n\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n    }\n  };\n\n  var onInternalSearchSplit = function onInternalSearchSplit(words) {\n    var patchValues = words;\n\n    if (mode !== 'tags') {\n      patchValues = words.map(function (word) {\n        var opt = labelOptions.get(word);\n        return opt === null || opt === void 0 ? void 0 : opt.value;\n      }).filter(function (val) {\n        return val !== undefined;\n      });\n    }\n\n    var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));\n    triggerChange(newRawValues);\n    newRawValues.forEach(function (newRawValue) {\n      triggerSelect(newRawValue, true);\n    });\n  }; // ========================== Context ===========================\n\n\n  var selectContext = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, parsedOptions), {}, {\n      flattenOptions: displayOptions,\n      onActiveValue: onActiveValue,\n      defaultActiveFirstOption: mergedDefaultActiveFirstOption,\n      onSelect: onInternalSelect,\n      menuItemSelectedIcon: menuItemSelectedIcon,\n      rawValues: rawValues,\n      fieldNames: mergedFieldNames,\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      childrenAsData: childrenAsData\n    });\n  }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, listHeight, listItemHeight, childrenAsData]); // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n\n  return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: selectContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    ref: ref,\n    omitDomProps: OMIT_DOM_PROPS,\n    mode: mode // >>> Values\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    onSearchSplit: onInternalSearchSplit // >>> OptionList\n    ,\n    OptionList: OptionList,\n    emptyOptions: !displayOptions.length // >>> Accessibility\n    ,\n    activeValue: activeValue,\n    activeDescendantId: \"\".concat(mergedId, \"_list_\").concat(accessibilityIndex)\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Select.displayName = 'Select';\n}\n\nvar TypedSelect = Select;\nTypedSelect.Option = Option;\nTypedSelect.OptGroup = OptGroup;\nexport default TypedSelect;","map":{"version":3,"sources":["C:/Users/Riccardo/Desktop/mercatino-pulci-restAPI/client/node_modules/rc-select/es/Select.js"],"names":["_extends","_toConsumableArray","_defineProperty","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","React","warning","useMergedState","BaseSelect","isMultiple","OptionList","Option","OptGroup","useOptions","SelectContext","useId","useRefFunc","fillFieldNames","flattenOptions","injectPropsWithOption","warningProps","toArray","useFilterOptions","useCache","OMIT_DOM_PROPS","isRawValue","value","Select","forwardRef","props","ref","id","mode","_props$prefixCls","prefixCls","backfill","fieldNames","inputValue","searchValue","onSearch","_props$autoClearSearc","autoClearSearchValue","onSelect","onDeselect","filterOption","filterSort","optionFilterProp","optionLabelProp","options","children","defaultActiveFirstOption","menuItemSelectedIcon","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","defaultValue","labelInValue","onChange","restProps","mergedId","multiple","childrenAsData","mergedFilterOption","useMemo","undefined","mergedFieldNames","JSON","stringify","_useMergedState","postState","search","_useMergedState2","mergedSearchValue","setSearchValue","parsedOptions","valueOptions","labelOptions","mergedOptions","convert2LabelValues","useCallback","draftValues","valueList","map","val","rawValue","rawLabel","rawKey","rawDisabled","_val$value","key","label","option","get","_option$key","disabled","process","env","NODE_ENV","optionLabel","_useMergedState3","_useMergedState4","internalValue","setInternalValue","rawLabeledValues","_values$","values","_useCache","_useCache2","mergedValues","getMixedOption","displayValues","length","firstValue","item","_item$label","rawValues","Set","useEffect","_mergedValues$","strValue","String","createTagOption","_ref","mergedLabel","filledTagOptions","cloneOptions","existOptions","has","sort","a","b","forEach","push","filteredOptions","filledSearchOptions","some","concat","orderedFilteredOptions","displayOptions","triggerChange","labeledValues","newVal","index","_mergedValues$index","returnValues","v","returnOptions","_React$useState","useState","_React$useState2","activeValue","setActiveValue","_React$useState3","_React$useState4","accessibilityIndex","setAccessibilityIndex","mergedDefaultActiveFirstOption","onActiveValue","active","_ref2","arguments","_ref2$source","source","triggerSelect","selected","getSelectEnt","_option$key2","_getSelectEnt","_getSelectEnt2","wrappedValue","_getSelectEnt3","_getSelectEnt4","_wrappedValue","_option","onInternalSelect","info","cloneValues","mergedSelect","filter","onDisplayValuesChange","nextValues","type","onInternalSearch","searchText","formatted","trim","newRawValues","Array","from","onInternalSearchSplit","words","patchValues","word","opt","newRawValue","selectContext","createElement","Provider","omitDomProps","onSearchSplit","emptyOptions","activeDescendantId","displayName","TypedSelect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"mode\", \"prefixCls\", \"backfill\", \"fieldNames\", \"inputValue\", \"searchValue\", \"onSearch\", \"autoClearSearchValue\", \"onSelect\", \"onDeselect\", \"filterOption\", \"filterSort\", \"optionFilterProp\", \"optionLabelProp\", \"options\", \"children\", \"defaultActiveFirstOption\", \"menuItemSelectedIcon\", \"virtual\", \"listHeight\", \"listItemHeight\", \"value\", \"defaultValue\", \"labelInValue\", \"onChange\"];\n\n/**\n * To match accessibility requirement, we always provide an input in the component.\n * Other element will not set `tabIndex` to avoid `onBlur` sequence problem.\n * For focused select, we set `aria-live=\"polite\"` to update the accessibility content.\n *\n * ref:\n * - keyboard: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role#Keyboard_interactions\n *\n * New api:\n * - listHeight\n * - listItemHeight\n * - component\n *\n * Remove deprecated api:\n * - multiple\n * - tags\n * - combobox\n * - firstActiveValue\n * - dropdownMenuStyle\n * - openClassName (Not list in api)\n *\n * Update:\n * - `backfill` only support `combobox` mode\n * - `combobox` mode not support `labelInValue` since it's meaningless\n * - `getInputElement` only support `combobox` mode\n * - `onChange` return OptionData instead of ReactNode\n * - `filterOption` `onChange` `onSelect` accept OptionData instead of ReactNode\n * - `combobox` mode trigger `onChange` will get `undefined` if no `value` match in Option\n * - `combobox` mode not support `optionLabelProp`\n */\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport BaseSelect, { isMultiple } from './BaseSelect';\nimport OptionList from './OptionList';\nimport Option from './Option';\nimport OptGroup from './OptGroup';\nimport useOptions from './hooks/useOptions';\nimport SelectContext from './SelectContext';\nimport useId from './hooks/useId';\nimport useRefFunc from './hooks/useRefFunc';\nimport { fillFieldNames, flattenOptions, injectPropsWithOption } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { toArray } from './utils/commonUtil';\nimport useFilterOptions from './hooks/useFilterOptions';\nimport useCache from './hooks/useCache';\nvar OMIT_DOM_PROPS = ['inputValue'];\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar Select = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      mode = props.mode,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-select' : _props$prefixCls,\n      backfill = props.backfill,\n      fieldNames = props.fieldNames,\n      inputValue = props.inputValue,\n      searchValue = props.searchValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      filterOption = props.filterOption,\n      filterSort = props.filterSort,\n      optionFilterProp = props.optionFilterProp,\n      optionLabelProp = props.optionLabelProp,\n      options = props.options,\n      children = props.children,\n      defaultActiveFirstOption = props.defaultActiveFirstOption,\n      menuItemSelectedIcon = props.menuItemSelectedIcon,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      labelInValue = props.labelInValue,\n      onChange = props.onChange,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var multiple = isMultiple(mode);\n  var childrenAsData = !!(!options && children);\n  var mergedFilterOption = React.useMemo(function () {\n    if (filterOption === undefined && mode === 'combobox') {\n      return false;\n    }\n\n    return filterOption;\n  }, [filterOption, mode]); // ========================= FieldNames =========================\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames, childrenAsData);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [// We stringify fieldNames to avoid unnecessary re-renders.\n  JSON.stringify(fieldNames), childrenAsData]); // =========================== Search ===========================\n\n  var _useMergedState = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      mergedSearchValue = _useMergedState2[0],\n      setSearchValue = _useMergedState2[1]; // =========================== Option ===========================\n\n\n  var parsedOptions = useOptions(options, children, mergedFieldNames);\n  var valueOptions = parsedOptions.valueOptions,\n      labelOptions = parsedOptions.labelOptions,\n      mergedOptions = parsedOptions.options; // ========================= Wrap Value =========================\n\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    // Convert to array\n    var valueList = toArray(draftValues); // Convert to labelInValue type\n\n    return valueList.map(function (val) {\n      var rawValue;\n      var rawLabel;\n      var rawKey;\n      var rawDisabled; // Fill label & value\n\n      if (isRawValue(val)) {\n        rawValue = val;\n      } else {\n        var _val$value;\n\n        rawKey = val.key;\n        rawLabel = val.label;\n        rawValue = (_val$value = val.value) !== null && _val$value !== void 0 ? _val$value : rawKey;\n      }\n\n      var option = valueOptions.get(rawValue);\n\n      if (option) {\n        var _option$key;\n\n        // Fill missing props\n        if (rawLabel === undefined) rawLabel = option === null || option === void 0 ? void 0 : option[optionLabelProp || mergedFieldNames.label];\n        if (rawKey === undefined) rawKey = (_option$key = option === null || option === void 0 ? void 0 : option.key) !== null && _option$key !== void 0 ? _option$key : rawValue;\n        rawDisabled = option === null || option === void 0 ? void 0 : option.disabled; // Warning if label not same as provided\n\n        if (process.env.NODE_ENV !== 'production' && !isRawValue(val)) {\n          var optionLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.label];\n\n          if (optionLabel !== undefined && optionLabel !== rawLabel) {\n            warning(false, '`label` of `value` is not same as `label` in Select options.');\n          }\n        }\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        key: rawKey,\n        disabled: rawDisabled\n      };\n    });\n  }, [mergedFieldNames, optionLabelProp, valueOptions]); // =========================== Values ===========================\n\n  var _useMergedState3 = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      internalValue = _useMergedState4[0],\n      setInternalValue = _useMergedState4[1]; // Merged value with LabelValueType\n\n\n  var rawLabeledValues = React.useMemo(function () {\n    var _values$;\n\n    var values = convert2LabelValues(internalValue); // combobox no need save value when it's empty\n\n    if (mode === 'combobox' && !((_values$ = values[0]) === null || _values$ === void 0 ? void 0 : _values$.value)) {\n      return [];\n    }\n\n    return values;\n  }, [internalValue, convert2LabelValues, mode]); // Fill label with cache to avoid option remove\n\n  var _useCache = useCache(rawLabeledValues, valueOptions),\n      _useCache2 = _slicedToArray(_useCache, 2),\n      mergedValues = _useCache2[0],\n      getMixedOption = _useCache2[1];\n\n  var displayValues = React.useMemo(function () {\n    // `null` need show as placeholder instead\n    // https://github.com/ant-design/ant-design/issues/25057\n    if (!mode && mergedValues.length === 1) {\n      var firstValue = mergedValues[0];\n\n      if (firstValue.value === null && (firstValue.label === null || firstValue.label === undefined)) {\n        return [];\n      }\n    }\n\n    return mergedValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mode, mergedValues]);\n  /** Convert `displayValues` to raw value type set */\n\n  var rawValues = React.useMemo(function () {\n    return new Set(mergedValues.map(function (val) {\n      return val.value;\n    }));\n  }, [mergedValues]);\n  React.useEffect(function () {\n    if (mode === 'combobox') {\n      var _mergedValues$;\n\n      var strValue = (_mergedValues$ = mergedValues[0]) === null || _mergedValues$ === void 0 ? void 0 : _mergedValues$.value;\n\n      if (strValue !== undefined && strValue !== null) {\n        setSearchValue(String(strValue));\n      }\n    }\n  }, [mergedValues]); // ======================= Display Option =======================\n  // Create a placeholder item if not exist in `options`\n\n  var createTagOption = useRefFunc(function (val, label) {\n    var _ref;\n\n    var mergedLabel = label !== null && label !== void 0 ? label : val;\n    return _ref = {}, _defineProperty(_ref, mergedFieldNames.value, val), _defineProperty(_ref, mergedFieldNames.label, mergedLabel), _ref;\n  }); // Fill tag as option if mode is `tags`\n\n  var filledTagOptions = React.useMemo(function () {\n    if (mode !== 'tags') {\n      return mergedOptions;\n    } // >>> Tag mode\n\n\n    var cloneOptions = _toConsumableArray(mergedOptions); // Check if value exist in options (include new patch item)\n\n\n    var existOptions = function existOptions(val) {\n      return valueOptions.has(val);\n    }; // Fill current value as option\n\n\n    _toConsumableArray(mergedValues).sort(function (a, b) {\n      return a.value < b.value ? -1 : 1;\n    }).forEach(function (item) {\n      var val = item.value;\n\n      if (!existOptions(val)) {\n        cloneOptions.push(createTagOption(val, item.label));\n      }\n    });\n\n    return cloneOptions;\n  }, [createTagOption, mergedOptions, valueOptions, mergedValues, mode]);\n  var filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, optionFilterProp); // Fill options with search value if needed\n\n  var filledSearchOptions = React.useMemo(function () {\n    if (mode !== 'tags' || !mergedSearchValue || filteredOptions.some(function (item) {\n      return item[optionFilterProp || 'value'] === mergedSearchValue;\n    })) {\n      return filteredOptions;\n    } // Fill search value as option\n\n\n    return [createTagOption(mergedSearchValue)].concat(_toConsumableArray(filteredOptions));\n  }, [createTagOption, optionFilterProp, mode, filteredOptions, mergedSearchValue]);\n  var orderedFilteredOptions = React.useMemo(function () {\n    if (!filterSort) {\n      return filledSearchOptions;\n    }\n\n    return _toConsumableArray(filledSearchOptions).sort(function (a, b) {\n      return filterSort(a, b);\n    });\n  }, [filledSearchOptions, filterSort]);\n  var displayOptions = React.useMemo(function () {\n    return flattenOptions(orderedFilteredOptions, {\n      fieldNames: mergedFieldNames,\n      childrenAsData: childrenAsData\n    });\n  }, [orderedFilteredOptions, mergedFieldNames, childrenAsData]); // =========================== Change ===========================\n\n  var triggerChange = function triggerChange(values) {\n    var labeledValues = convert2LabelValues(values);\n    setInternalValue(labeledValues);\n\n    if (onChange && ( // Trigger event only when value changed\n    labeledValues.length !== mergedValues.length || labeledValues.some(function (newVal, index) {\n      var _mergedValues$index;\n\n      return ((_mergedValues$index = mergedValues[index]) === null || _mergedValues$index === void 0 ? void 0 : _mergedValues$index.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);\n    }))) {\n      var returnValues = labelInValue ? labeledValues : labeledValues.map(function (v) {\n        return v.value;\n      });\n      var returnOptions = labeledValues.map(function (v) {\n        return injectPropsWithOption(getMixedOption(v.value));\n      });\n      onChange( // Value\n      multiple ? returnValues : returnValues[0], // Option\n      multiple ? returnOptions : returnOptions[0]);\n    }\n  }; // ======================= Accessibility ========================\n\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeValue = _React$useState2[0],\n      setActiveValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      accessibilityIndex = _React$useState4[0],\n      setAccessibilityIndex = _React$useState4[1];\n\n  var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== undefined ? defaultActiveFirstOption : mode !== 'combobox';\n  var onActiveValue = React.useCallback(function (active, index) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$source = _ref2.source,\n        source = _ref2$source === void 0 ? 'keyboard' : _ref2$source;\n\n    setAccessibilityIndex(index);\n\n    if (backfill && mode === 'combobox' && active !== null && source === 'keyboard') {\n      setActiveValue(String(active));\n    }\n  }, [backfill, mode]); // ========================= OptionList =========================\n\n  var triggerSelect = function triggerSelect(val, selected) {\n    var getSelectEnt = function getSelectEnt() {\n      var _option$key2;\n\n      var option = getMixedOption(val);\n      return [labelInValue ? {\n        label: option === null || option === void 0 ? void 0 : option[mergedFieldNames.label],\n        value: val,\n        key: (_option$key2 = option.key) !== null && _option$key2 !== void 0 ? _option$key2 : val\n      } : val, injectPropsWithOption(option)];\n    };\n\n    if (selected && onSelect) {\n      var _getSelectEnt = getSelectEnt(),\n          _getSelectEnt2 = _slicedToArray(_getSelectEnt, 2),\n          wrappedValue = _getSelectEnt2[0],\n          option = _getSelectEnt2[1];\n\n      onSelect(wrappedValue, option);\n    } else if (!selected && onDeselect) {\n      var _getSelectEnt3 = getSelectEnt(),\n          _getSelectEnt4 = _slicedToArray(_getSelectEnt3, 2),\n          _wrappedValue = _getSelectEnt4[0],\n          _option = _getSelectEnt4[1];\n\n      onDeselect(_wrappedValue, _option);\n    }\n  }; // Used for OptionList selection\n\n\n  var onInternalSelect = useRefFunc(function (val, info) {\n    var cloneValues; // Single mode always trigger select only with option list\n\n    var mergedSelect = multiple ? info.selected : true;\n\n    if (mergedSelect) {\n      cloneValues = multiple ? [].concat(_toConsumableArray(mergedValues), [val]) : [val];\n    } else {\n      cloneValues = mergedValues.filter(function (v) {\n        return v.value !== val;\n      });\n    }\n\n    triggerChange(cloneValues);\n    triggerSelect(val, mergedSelect); // Clean search value if single or configured\n\n    if (mode === 'combobox') {\n      // setSearchValue(String(val));\n      setActiveValue('');\n    } else if (!isMultiple || autoClearSearchValue) {\n      setSearchValue('');\n      setActiveValue('');\n    }\n  }); // ======================= Display Change =======================\n  // BaseSelect display values change\n\n  var onDisplayValuesChange = function onDisplayValuesChange(nextValues, info) {\n    triggerChange(nextValues);\n\n    if (info.type === 'remove' || info.type === 'clear') {\n      info.values.forEach(function (item) {\n        triggerSelect(item.value, false);\n      });\n    }\n  }; // =========================== Search ===========================\n\n\n  var onInternalSearch = function onInternalSearch(searchText, info) {\n    setSearchValue(searchText);\n    setActiveValue(null); // [Submit] Tag mode should flush input\n\n    if (info.source === 'submit') {\n      var formatted = (searchText || '').trim(); // prevent empty tags from appearing when you click the Enter button\n\n      if (formatted) {\n        var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), [formatted])));\n        triggerChange(newRawValues);\n        triggerSelect(formatted, true);\n        setSearchValue('');\n      }\n\n      return;\n    }\n\n    if (info.source !== 'blur') {\n      if (mode === 'combobox') {\n        triggerChange(searchText);\n      }\n\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(searchText);\n    }\n  };\n\n  var onInternalSearchSplit = function onInternalSearchSplit(words) {\n    var patchValues = words;\n\n    if (mode !== 'tags') {\n      patchValues = words.map(function (word) {\n        var opt = labelOptions.get(word);\n        return opt === null || opt === void 0 ? void 0 : opt.value;\n      }).filter(function (val) {\n        return val !== undefined;\n      });\n    }\n\n    var newRawValues = Array.from(new Set([].concat(_toConsumableArray(rawValues), _toConsumableArray(patchValues))));\n    triggerChange(newRawValues);\n    newRawValues.forEach(function (newRawValue) {\n      triggerSelect(newRawValue, true);\n    });\n  }; // ========================== Context ===========================\n\n\n  var selectContext = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, parsedOptions), {}, {\n      flattenOptions: displayOptions,\n      onActiveValue: onActiveValue,\n      defaultActiveFirstOption: mergedDefaultActiveFirstOption,\n      onSelect: onInternalSelect,\n      menuItemSelectedIcon: menuItemSelectedIcon,\n      rawValues: rawValues,\n      fieldNames: mergedFieldNames,\n      virtual: virtual,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      childrenAsData: childrenAsData\n    });\n  }, [parsedOptions, displayOptions, onActiveValue, mergedDefaultActiveFirstOption, onInternalSelect, menuItemSelectedIcon, rawValues, mergedFieldNames, virtual, listHeight, listItemHeight, childrenAsData]); // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ==============================================================\n  // ==                          Render                          ==\n  // ==============================================================\n\n\n  return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: selectContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({}, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    ref: ref,\n    omitDomProps: OMIT_DOM_PROPS,\n    mode: mode // >>> Values\n    ,\n    displayValues: displayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch,\n    onSearchSplit: onInternalSearchSplit // >>> OptionList\n    ,\n    OptionList: OptionList,\n    emptyOptions: !displayOptions.length // >>> Accessibility\n    ,\n    activeValue: activeValue,\n    activeDescendantId: \"\".concat(mergedId, \"_list_\").concat(accessibilityIndex)\n  })));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Select.displayName = 'Select';\n}\n\nvar TypedSelect = Select;\nTypedSelect.Option = Option;\nTypedSelect.OptGroup = OptGroup;\nexport default TypedSelect;"]},"metadata":{},"sourceType":"module"}